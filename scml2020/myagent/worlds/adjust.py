# This script adjusts the contents of one or more log folders generated by
# running SCML2020 world simulations or tournaments to match the format of this
# dataset.
#
#
# Usage:
# ======
#
# To adjust all world log folders under the current directory use:
#
# >> python3 adjust.py
#
#
# To adjust specific world folders
#
# >> python3 adjust.py folder1 folder2 folder3
#
#
# Remarks:
# ========
#  - The adjustment happens in-place removing the files in the given folder and replacing
#    them with the files matching this dataset's format
#  - Agent logs if any are deleted
#  - Extra files (for example negotiation.csv if found) will not be touched
#  - It is safe to run the script over folders that have already been adjusted.
#  - You should create folders failed and failed2 in the parent/parent of the worlds. Folders
#    that fail during processing are moved there.


import sys
import pandas as pd
from uuid import uuid4
from pathlib import Path as p
from json import load, dump
import shutil
from stringcase import snakecase


def adjust(folder):
    folder = p(folder).absolute()
    print(f"Processing {str(folder)}")
    try:
        if (folder / "_agent_logs").exists():
            shutil.rmtree(str(folder / "_agent_logs"))
        contracts = pd.read_csv(folder / "contracts_full_info.csv", index_col=0)
        stats = pd.read_csv(folder / "stats.csv", index_col=0)
        params = load(open(folder / "params.json"))
        info = load(open(folder / "info.json"))
        agents = load(open(folder / "agents.json", "r"))
    except:
        if (folder / "contracts.csv").exists():
            print(f"Already processed {str(folder)}")
            for f in (
                "_current_scores.csv",
                "contracts_full_info.csv",
                "signed_contracts.csv",
                "stats.json",
            ):
                try:
                    shutil.os.unlink(folder / f)
                except:
                    pass
            return
        print(f"Failed, will remove {str(folder)}")
        (folder.parent.parent / "failed").mkdir(exist_ok=True, parents=True)
        shutil.move(str(folder), str(folder.parent.parent / "failed" / folder.name))
        return
    try:
        agent_cols = set(_ for _ in stats.columns if "@" in _)
        detailed_cols = set(
            _
            for _ in stats.columns
            if _.startswith("balance")
            or _.startswith("assets")
            or _.startswith("bankrupt")
        )
        agent_stats = stats.loc[:, [_ for _ in stats.columns if _ in detailed_cols]]
        stats = stats.loc[:, [_ for _ in stats.columns if _ not in agent_cols]]
        params_to_keep = [
            "timeLimit",
            "spotDiscount",
            "spotMarketGlobalLoss",
            "negQuotaStep",
            "nProcesses",
            "nProducts",
            "nSteps",
            "financialReportsPeriod",
            "breachProb",
            "exogenousHorizon",
        ]
        params = dict(zip(params_to_keep, (params[_] for _ in params_to_keep)))
        breach_prob = params.pop("breachProb")
        params = dict(zip((snakecase(_) for _ in params.keys()), params.values()))

        info_to_keep = [
            "time_limit",
            "max_productivity",
            "catalog_prices",
            "cash_availability",
            "initial_balance_final",
            "expected_productivity",
            "expected_mean_profit",
        ]
        info = dict(zip(info_to_keep, (info[k] for k in info_to_keep)))
        info["initial_balance"] = info.pop("initial_balance_final")

        for k, v in info.items():
            params[k] = v


        agents = pd.DataFrame(agents)
        agents = agents.transpose()
        participants = ~agents["id"].isin(("BUYER", "SELLER"))
        agents.loc[~participants, "type"] = agents.loc[~participants, "name"]
        agents["index"] = agents["name"].str.slice(0, 2)
        agents.loc[participants, "name"] = (
            agents.loc[participants, "index"]
            + agents.loc[participants, "type"]
            + "@"
            + agents.loc[participants, "level"].astype(str)
        )
        agent_map = dict(zip(agents["id"], agents["name"]))

        agent_old_names = list(agent_map.keys())
        reports = dict()
        for aname in agent_old_names:
            reports[aname] = agent_stats.loc[
                ::5, [_ for _ in agent_stats.columns if aname in _]
            ]
            reports[aname].columns = [_.split("_")[0] for _ in reports[aname].columns]

        breach_prob = dict(
            zip((agent_map[k] for k in agent_map.keys()), breach_prob.values())
        )
        agents = agents.drop("levels", axis=1)
        agents = agents.reset_index()
        agents = agents.drop("level_0", axis=1)
        agents["id"] = agents["name"]
        agents = agents.drop("index", axis=1)
        agents.to_csv(folder / "agents_.csv")
        contracts.buyer = contracts.buyer.apply(lambda x: agent_map[x])
        contracts.seller = contracts.seller.apply(lambda x: agent_map[x])
        participants = ~agents["id"].isin(("BUYER", "SELLER"))
        agents.loc[~participants, "type"] = "System"
        contracts["product"] = contracts.product_name.str.slice(1, None).astype(int)
        contracts = contracts.drop("buyer_name", axis=1)
        contracts = contracts.drop("seller_name", axis=1)
        contracts = contracts.drop("product_name", axis=1)
        contracts = contracts.drop("breaches", axis=1)
        contracts = contracts.drop("signatures", axis=1)
        contracts = contracts.drop("negotiation_id", axis=1)
        contracts = contracts.drop("id", axis=1)
        contracts = contracts.drop("issues", axis=1)

        contracts.to_csv(folder / "contracts_.csv", index="index")

        for aname, rep in reports.items():
            if agent_map[aname] in ("BUYER", "SELLER"):
                continue
            rep["agent_id"] = agent_map[aname]
            rep["step"] = rep.index.astype(int)
        reports = pd.concat(tuple(reports.values()), ignore_index=True)

        reports.to_csv(folder / f"reports.csv", index="index")
        agents.to_csv(folder / "agents_.csv", index="index")
        stats.to_csv(folder / "stats_.csv", index="index")
        dump(breach_prob, open(folder / "breaches.json", "w"))
        dump(params, open(folder / "params_.json", "w"))
        # dump(info, open(folder / "info_.json", "w"))

        for f in (
            "_current_scores.json",
            "agents.json",
            "breaches.csv",
            "contracts_full_info.csv",
            "info.json",
            "params.json",
            "signed_contracts.csv",
            "stats.json",
            "stats.csv",
        ):
            try:
                shutil.os.unlink(folder / f)
            except:
                pass

        for f in (
            "agents_.csv",
            "contracts_.csv",
            "info_.json",
            "params_.json",
            "stats_.csv",
        ):
            try:
                shutil.move(str(folder / f), str(folder / f.replace("_", "")))
            except:
                pass
    except:
        print(f"Internal Error in {str(folder)}")
        (folder.parent.parent / "failed2").mkdir(exist_ok=True, parents=True)
        shutil.move(str(folder), str(folder.parent.parent / "failed2" / folder.name))


if __name__ == "__main__":
    if len(sys.argv) > 1:
        for folder in sys.argv[1:]:
            adjust(folder)
    else:
        for folder in p.cwd().glob("*"):
            if not folder.is_dir():
                continue
            adjust(folder)
